#!/usr/bin/bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

source "$SCRIPT_DIR/.env" set

#Set default values
LOG_LEVEL=${LOG_LEVEL:-'info'}
WATCH_DELAY=${WATCH_DELAY:-30}
VIDEO_FOLDER=${VIDEO_FOLDER:-'~/Videos'}
# VIDEO_SCALE=${VIDEO_SCALE:-240}
TMP_VIDEO_FOLDER="/tmp/pi-kiosk-videos"

APP_NAME="$(basename $SCRIPT_DIR)"

CHECK_FILES_TIMEOUT=${WATCH_DELAY:-30}
CHECK_STILL_ULOADING_TIMEOUT=10

TMP_FILES="/tmp/$APP_NAME"
TMP_SOURCES="$TMP_FILES/source"
TMP_CONVERTED="$TMP_FILES/converted"

WATCH_FOLDER=${VIDEO_FOLDER:-'~/Videos'}

VIDEO_FILES="$SCRIPT_DIR/files"
VIDEO_SOURCES="$VIDEO_FILES/source"
VIDEO_CONVERTED="$VIDEO_FILES/converted"
PLAYLIST="$VIDEO_FILES/playlist.m3u"
SCALEFILE="$VIDEO_CONVERTED/scale.txt"

is_syslog() { if [ -f /var/log/syslog ]; then return 0; else return 1; fi }
do_log() { 
    local msg="$(date '+%T.%6N') [ $1 ] $2"
    
    [ $1 == 'ERROR' ] && >&2 echo -e "$msg" || echo -e "$msg"    

    # if is_syslog; then
    #     local facility="local7.$(case $1 in "ERROR") echo "err";; "DEBUG") echo "debug";; *) echo "info";; esac)";
    #     logger -p $facility "$msg"    
    # fi

    echo -e $msg >> "/tmp/video-kiosk.log"

    return 0; 
}
log_debug() { [ $LOG_LEVEL == 'debug' ] && do_log "DEBUG" "$1"; return 0; }
log_info()  { do_log "INFO " "$1"; return 0; }
log_error() { do_log "ERROR" "$1"; return 0; }

is_yes () { [ $1 == "yes" ] && return 0 || return 1; }
is_force () { [ ! -z $1 ] && return 0 || return 1; }

is_folder() { [ -d $1 ] && return 0 || return 1; }
is_not_folder() { [ ! -d $1 ] && return 0 || return 1; }

is_tmp_folder() { return $(is_folder "$TMP_FILES"); }
is_files_folder() { return $(is_folder "$VIDEO_FILES"); }
is_watch_folder() { return $(is_folder "$WATCH_FOLDER"); }

is_video_kiosk() { 
    local others="$(fuser "$SCRIPT_DIR/video-kiosk" 2>/dev/null | xargs | grep -x -v $$)"
    [[ -z $others ]] && return 1 || return 0;
}


is_vlc() { if pgrep -x "vlc" > /dev/null; then return 0; else return 1; fi }

kill_vlc() { 
    if is_vlc; then
        log_info "Terminating VLC player"
        pkill vlc || log_error "Unable to pkill vlc process"; 
    fi
    return 0; 
}
kill_video_kiosk() { 
    pid=$(pgrep video-kiosk | grep -x -v $$)

    pid=$(<<<"$pid" xargs -n1 sh -c 'kill -0 "$1" 2>/dev/null && echo "$1"' --)

    if [ -n "$pid" ]; then
        kill $pid || log_error "Unable to kill video-kiosk process: $pid";
    fi
    kill_vlc

    return 0;
}

ensure_folders() {
    local folders=("$TMP_SOURCES" "$TMP_CONVERTED" "$VIDEO_SOURCES" "$VIDEO_CONVERTED")
    
    for folder in ${folders[@]}; do mkdir -p "$folder"; done    

    return 0;
}

is_setup() {
    # if ! is_files_folder; then
    #     log_error "Video kiosk is not set up yet. Please run 'bash video-kiosk setup' first"
    #     return 1;
    # fi

    return 0;    
}

setup() {
    if is_force $1 || ! is_files_folder; then
        log_info "Setting up video kiosk ..."

        log_info "  - installing required componsents: vlc, ffmpeg, pv"
        sudo apt install -y vlc ffmpeg pv > /dev/null 2>&1

        ###
        if is_yes $SETUP_AUTOLOGIN; then
            log_info "  - enabling autologin mode"
            sudo sed /etc/lightdm/lightdm.conf -i -e "s/^\(#\|\)autologin-user=.*/autologin-user=$USER/"
            sudo rm -f /etc/systemd/system/getty@tty1.service.d/autologin.conf
            sudo bash -c 'cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $USER --noclear %I \$TERM
EOF'
            sudo systemctl --quiet set-default graphical.target
        fi

        ###
        if is_yes $SETUP_PI_VNC_SERVER; then
            log_info "  - setting up VNC server"
            sudo rm -f /etc/xdg/autostart/vnc_xrandr.desktop
            sudo bash -c 'cat > /etc/xdg/autostart/vnc_xrandr.desktop << EOF
[Desktop Entry]
Type=Application
Name=vnc_xrandr
Comment=Set resolution for VNC
NoDisplay=true
Exec=sh -c "if ! (xrandr | grep -q -w connected) ; then /usr/bin/xrandr --fb 1920x1080 ; fi"
EOF'
            sudo systemctl enable vncserver-x11-serviced.service;
            sudo systemctl start vncserver-x11-serviced.service;
        fi

        ###
        log_info "  - setting up scripts && folders"
        chmod a+x video-kiosk

        ensure_folders

        if is_yes $SETUP_AUTOSTART_SCRIPT; then
            log_info "  - autostart script"
            mkdir -p ~/.config/autostart

            rm -f ~/.config/autostart/$APP_NAME.desktop
            cat > ~/.config/autostart/$APP_NAME.desktop << EOF
[Desktop Entry]
Type=Application
Name=Video Kiosk
OnlyShowIn=GNOME;XFCE;LXDE;
Exec=bash $SCRIPT_DIR/video-kiosk autostart
EOF
        fi

        if is_yes $REPLACE_DESKTOP_BACKGROUND; then
            export DISPLAY=:0.0; pcmanfm --set-wallpaper "$SCRIPT_DIR/misc/default.jpg"
        fi

        log_info "Setting up video kiosk: Done"
    fi
}

function reset() {
    if is_force $1 || is_files_folder; then
        log_info "Reseting data ..."
        
        stop;

        rm -rf "$VIDEO_FILES"
        rm -rf "$TMP_FILES"
        rm -f ~/.config/autostart/$APP_NAME.desktop

        log_info "Reseting data: Done"
    fi
}

function stop() {    
    if is_video_kiosk; then        
        log_info "Stopping video kiosk ..."
        kill_video_kiosk || log_error "Unable to stop video-kiosk"
        log_info "Video kiosk stopped"
    fi

    return 0;
}

function stop_if_running() {
    if is_video_kiosk; then 
        log_info "Video kiosk is running already"
        stop;
    fi

    return 0;
}

get_video_files() {
    if [ -d "$1" ]; then
        local files=""
        for path in $(find "$1" -type f); do
            if [[ ! -z "$(file --mime-type "$path" | egrep ': video')" ]]; then
                local filename=$(realpath "$path")
                files="$files\n$filename"
            fi
        done
        echo -e "${files/\\n/}"
    fi
}

get_folder_state() {
    if [ -d "$1" ]; then
        local files=""
        while read path ; do
            local mime=$(file --mime-type "$path" | egrep ': video')
            if [[ ! -z $mime ]]; then
                local filename=$(basename "$path")
                local filesize=$(stat -c%s "$path")

                files="$files\n$filename $filesize"
            fi
        done <<< "$(get_video_files "$1")"

        if [[ ! -z $files ]]; then
            if [[ "$1" == "$VIDEO_SOURCES" ]]; then
                local scale=
                if [ -f "$SCALEFILE" ]; then
                    scale="$(<"$SCALEFILE")"
                fi
                
                files="$files\nSCALE: $scale"
            else
                files="$files\nSCALE: $VIDEO_SCALE"
            fi
        fi

        echo -e "${files/\\n/}"
    fi
}

make_playlist() {
    log_info "Making play list"

    if [ -f "$PLAYLIST" ]; then
        rm -f "$PLAYLIST" || log_error "Unable to delete playlist file: $PLAYLIST. Probably file is locked by another program"
    fi

    local files=""
    if [ -d "$VIDEO_CONVERTED" ]; then
        while read path ; do
            local mime=$(file --mime-type "$path" | egrep ': video')
            if [[ ! -z $mime ]]; then
                files="$files\n$path"
            fi
        done <<< "$(get_video_files "$VIDEO_CONVERTED")"
    fi

    if [ -z "$files" ]; then
        log_info "  - making play list of default video"
        echo "$(realpath ./misc/default.mp4)" > "$PLAYLIST"
    else
        log_info "Making playlist of following files: $files"        
        echo -e "${files/\\n/}" > "$PLAYLIST"
    fi

    return 0;
}

has_new_videos() {
    log_debug "Checking if there are any new video files"
    if is_watch_folder && is_files_folder; then
        local videos="$(get_folder_state "$WATCH_FOLDER")"
        local current_videos="$(get_folder_state "$VIDEO_SOURCES")"

        log_info "Watching video folder: \n$videos"
        log_info "Current sources video folder: \n$current_videos"

        if [ "$videos" != "$current_videos" ]; then
            log_debug "Found new video files"
            return 0;
        fi
    else 
        log_debug "Unable to check for new video files. Either watch folder or files folder doesnt exist"
    fi

    log_debug "No new video files found"
    return 1;
}

videos_are_uploading() {
    #log_debug "checking if new videos are uploading right now"
    if is_watch_folder; then
        local current_state=$(get_folder_state "$WATCH_FOLDER")

        sleep $CHECK_STILL_ULOADING_TIMEOUT

        local next_state=$(get_folder_state "$WATCH_FOLDER")

        if [ "$current_state" != "$next_state" ]; then
            return 0;
        fi
    fi

    return 1;
}

copy_source_files() {
    local src_folder="$WATCH_FOLDER"
    local dest_folder="$TMP_SOURCES"

    log_info "Copping original files"

    rm -f "$dest_folder/*"

    if [ -d "$src_folder" ]; then
        while read path ; do
            local name=$(basename "$path")
            cp "$path" "$dest_folder/$name" || log_error "Uable to copy source file: $path"
        done <<< "$(get_video_files "$src_folder")"
    fi

    return 0;
}

convert_source_files() {
    log_info "Converting video files ..."
    
    local src_folder="$TMP_SOURCES"
    local dest_folder="$TMP_CONVERTED"

    rm -f "$dest_folder/*"

    if [ -d "$src_folder" ]; then
        err="Cannot find any file to convert"
        if [ -z $VIDEO_SCALE ]; then
            log_info "  - VIDEO_SCALE is not defined. Copping original files instead"
            while read path ; do
                local name=$(basename "$path")
                log_info "  - copping $name"
                cp "$path" "$dest_folder/$name"
                err=
            done <<< "$(get_video_files "$src_folder")"            
        else
            log_info "  - Converting video files to *:$VIDEO_SCALE"
            while read path ; do            
                local name=$(basename "$path")
                log_info "  - converting $name"
                
                pv "$path" | ffmpeg -i pipe:0 -v warning \
                   -vf scale=-2:$VIDEO_SCALE -c:v libx264 -crf 18 -preset veryslow -c:a copy \
                   "$dest_folder/$name" || log_error "Unable to convert video: $path"
                err=
            done <<< "$(get_video_files "$src_folder")"
        fi

        if [ -z $err ]; then 
            log_info "Converting video files: Done"; 
            echo "$VIDEO_SCALE" > $SCALEFILE
            return 0; 
        fi
    fi

    log_error "Unable to convert video files. $err"; 
    return 1;
}

move_converted_files() {
    rm -rf "$VIDEO_FILES" || log_error "Unable to delete files folder before moving converted videos"
    
    ensure_folders

    log_info "Moving converted files"

    err="Unable to find any converted files"

    if [ -d "$VIDEO_CONVERTED" ]; then
        while read path ; do
            local name=$(basename "$path")
            mv "$path" "$VIDEO_CONVERTED/$name"
            err=
        done <<< "$(get_video_files "$TMP_CONVERTED")"
    fi

    if [ -z $err ]; then 
        err="Unable to find any source files"

        if [ -d "$VIDEO_SOURCES" ]; then
            while read path ; do
                local name=$(basename "$path")
                mv "$path" "$VIDEO_SOURCES/$name"
                err=
            done <<< "$(get_video_files "$TMP_SOURCES")"
        fi    
    fi

    if [ -z $err ]; then 
        log_info "Moving converted files: Done"
        return 0
    fi
    
    log_error "Unable to move converted files. $err" 
    return 1
}

run_vlc() {
    if is_vlc; then
        log_info "Restarting VLC player"
    else
        log_info "Starting VLC player"
    fi

    kill_vlc

    make_playlist

    #vlc --no-osd --fullscreen --loop --no-qt-recentplay --qt-continue=0 --no-qt-error-dialogs "$PLAYLIST"  > /dev/null 2>&1 &
    vlc --no-osd --fullscreen --loop --no-qt-recentplay --qt-continue=0 "$PLAYLIST" &

    return 0;
}

start() {
    if ! is_setup; then        
        exit 1;
    fi

    stop;

    log_info "Starting video kiosk..."
    log_info "  - log level: $LOG_LEVEL"
    log_info "  - watch folder: $WATCH_FOLDER"
    log_info "  - check for new files timeout: $CHECK_FILES_TIMEOUT"
    log_info "  - check if videos still uploading timeout: $CHECK_STILL_ULOADING_TIMEOUT"
    log_info "  - convert new videos to: ${VIDEO_SCALE:-keep original size}"
    
    ensure_folders;

    run_vlc;
    
    while true; do    
        if has_new_videos && ! videos_are_uploading; then
            log_info "Detected $WATCH_FOLDER folder update. Syncing video files ..."

            copy_source_files && \
                convert_source_files && \
                kill_vlc && \
                move_converted_files && \
                run_vlc && \
                log_info "Syncing video files: Done" || log_error "Unable to sync video files"
        else
            if ! is_vlc; then
                run_vlc
            fi
        fi

        sleep $CHECK_FILES_TIMEOUT
    done
}

auto_start () {

    if ! is_video_kiosk && is_setup; then
        start;
        return 0;
    else
        return 1;
    fi
}

run() {
    case "$1" in
        "autostart") auto_start;;
        "run") stop_if_running; is_setup && start;;
        "start") stop_if_running; is_setup && start;;
        "stop") stop;;
        "restart") stop; is_setup && start;;
        "reset") reset 1; setup 1;;
        "uninstall") reset 1;;
        "setup") setup 1;;
      *) >&2 echo "Invalid command: $@. Must be one of following: start stop restart reset setup"; exit 1;;
    esac    
}

run $1;

